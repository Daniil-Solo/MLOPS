[
  {
    "objectID": "snake_make_workflow.html",
    "href": "snake_make_workflow.html",
    "title": "Snakemake workflow",
    "section": "",
    "text": "В этом пайплайне используется следующий датасет\nВ нем содержится информация о студентах: их демографические данные и успеваемость.\nЦель - предсказать итоговую оценку учащегося от 0 до 20.\nДанные подготавливаются в двух вариантах, отличающиеся количество используемых признаков."
  },
  {
    "objectID": "snake_make_workflow.html#данные",
    "href": "snake_make_workflow.html#данные",
    "title": "Snakemake workflow",
    "section": "",
    "text": "В этом пайплайне используется следующий датасет\nВ нем содержится информация о студентах: их демографические данные и успеваемость.\nЦель - предсказать итоговую оценку учащегося от 0 до 20.\nДанные подготавливаются в двух вариантах, отличающиеся количество используемых признаков."
  },
  {
    "objectID": "snake_make_workflow.html#модели",
    "href": "snake_make_workflow.html#модели",
    "title": "Snakemake workflow",
    "section": "Модели",
    "text": "Модели\nВ рамках пайплайна обучаются модели:\n\nЛинейная регрессия;\nСлучайный лес."
  },
  {
    "objectID": "snake_make_workflow.html#пайплайн",
    "href": "snake_make_workflow.html#пайплайн",
    "title": "Snakemake workflow",
    "section": "Пайплайн",
    "text": "Пайплайн\nВ пайплайне используются wildcards, expand, распараллеливание\nГраф пайплайна представлен на рисунке Figure 1.\n\n\nCode\nimport matplotlib.pyplot as plt\nfrom PIL import Image\n\nPIPELINE_IMAGE_FILENAME = \"pipeline.png\"\n\n# Visualize dag\nfig = plt.figure(figsize=(10, 6))\nax = fig.add_subplot(111)\nimg = Image.open(PIPELINE_IMAGE_FILENAME)\nax.imshow(img)\nax.axes.xaxis.set_visible(False)  # type: ignore[union-attr]\nax.axes.yaxis.set_visible(False)  # type: ignore[union-attr]\nax.spines[\"top\"].set_visible(False)\nax.spines[\"right\"].set_visible(False)\nax.spines[\"bottom\"].set_visible(False)\nax.spines[\"left\"].set_visible(False)\nplt.show()\n\n\n\n\n\n\n\n\nFigure 1: Пайплайн"
  },
  {
    "objectID": "snake_make_workflow.html#команды",
    "href": "snake_make_workflow.html#команды",
    "title": "Snakemake workflow",
    "section": "Команды",
    "text": "Команды\nГенерация изображения пайплайна\npoetry run snakemake --dag | dot -T png &gt; pipeline.png\nЗапуск пайплайна\npoetry run snakemake --cores 4 all"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Daniil Solovjev",
    "section": "",
    "text": "I am Python Backend Developer living in the Perm.\nCurrently I study at AI Talent Hub. I like to learn something new in programming."
  },
  {
    "objectID": "kaggle_tree_eda.html",
    "href": "kaggle_tree_eda.html",
    "title": "Kaggle Tree EDA",
    "section": "",
    "text": "Посмотрим на данные в датасете, рисунок: Figure 1.\n\n\nCode\nimport os\n\nimport pandas as pd\nfrom dotenv import load_dotenv\n\nload_dotenv()\nDATA_PATH = os.environ.get('KAGGLE_TREE_DATA', \"data.csv\")\ndf = pd.read_csv(DATA_PATH)\nnew_columns = [\"_\".join(c.split()) for c in df.columns]\ndf.columns = pd.Index(new_columns)\ndf.head()\n\n\n\n\n\n\n\n\n\n\n\n\ntree_id\nblock_id\ncreated_at\ntree_dbh\nstump_diam\ncurb_loc\nstatus\nhealth\nspc_latin\nspc_common\n...\nboro_ct\nstate\nlatitude\nlongitude\nx_sp\ny_sp\ncouncil_district\ncensus_tract\nbin\nbbl\n\n\n\n\n0\n180683\n348711\n2015-08-27T00:00:00.000\n3\n0\nOnCurb\nAlive\nFair\nAcer rubrum\nred maple\n...\n4073900\nNew York\n40.723092\n-73.844215\n1027431.148\n202756.7687\n29.0\n739.0\n4052307.0\n4.022210e+09\n\n\n1\n200540\n315986\n2015-09-03T00:00:00.000\n21\n0\nOnCurb\nAlive\nFair\nQuercus palustris\npin oak\n...\n4097300\nNew York\n40.794111\n-73.818679\n1034455.701\n228644.8374\n19.0\n973.0\n4101931.0\n4.044750e+09\n\n\n2\n204026\n218365\n2015-09-05T00:00:00.000\n3\n0\nOnCurb\nAlive\nGood\nGleditsia triacanthos var. inermis\nhoneylocust\n...\n3044900\nNew York\n40.717581\n-73.936608\n1001822.831\n200716.8913\n34.0\n449.0\n3338310.0\n3.028870e+09\n\n\n3\n204337\n217969\n2015-09-05T00:00:00.000\n10\n0\nOnCurb\nAlive\nGood\nGleditsia triacanthos var. inermis\nhoneylocust\n...\n3044900\nNew York\n40.713537\n-73.934456\n1002420.358\n199244.2531\n34.0\n449.0\n3338342.0\n3.029250e+09\n\n\n4\n189565\n223043\n2015-08-30T00:00:00.000\n21\n0\nOnCurb\nAlive\nGood\nTilia americana\nAmerican linden\n...\n3016500\nNew York\n40.666778\n-73.975979\n990913.775\n182202.4260\n39.0\n165.0\n3025654.0\n3.010850e+09\n\n\n\n\n5 rows × 45 columns\n\n\n\n\nFigure 1: Просмотр данных\n\n\n\n\nПосмотрим более подробную информацию о датасете, рисунок: Figure 2.\n\n\nCode\nimport io\n\nbuf = io.StringIO()\ndf.info(buf=buf)\nlines = buf.getvalue().splitlines()[3:-2]\nlines = lines[:1] + lines[2:]\nline_list = [line.split()[1:3] + line.split()[4:5] for line in lines]\npd.DataFrame(data=line_list[1:], columns=line_list[0])\n\n\n\n\n\n\n\n\n\n\n\n\nColumn\nNon-Null\nDtype\n\n\n\n\n0\ntree_id\n683788\nint64\n\n\n1\nblock_id\n683788\nint64\n\n\n2\ncreated_at\n683788\nobject\n\n\n3\ntree_dbh\n683788\nint64\n\n\n4\nstump_diam\n683788\nint64\n\n\n5\ncurb_loc\n683788\nobject\n\n\n6\nstatus\n683788\nobject\n\n\n7\nhealth\n652172\nobject\n\n\n8\nspc_latin\n652169\nobject\n\n\n9\nspc_common\n652169\nobject\n\n\n10\nsteward\n164350\nobject\n\n\n11\nguards\n79866\nobject\n\n\n12\nsidewalk\n652172\nobject\n\n\n13\nuser_type\n683788\nobject\n\n\n14\nproblems\n225844\nobject\n\n\n15\nroot_stone\n683788\nobject\n\n\n16\nroot_grate\n683788\nobject\n\n\n17\nroot_other\n683788\nobject\n\n\n18\ntrunk_wire\n683788\nobject\n\n\n19\ntrnk_light\n683788\nobject\n\n\n20\ntrnk_other\n683788\nobject\n\n\n21\nbrch_light\n683788\nobject\n\n\n22\nbrch_shoe\n683788\nobject\n\n\n23\nbrch_other\n683788\nobject\n\n\n24\naddress\n683788\nobject\n\n\n25\npostcode\n683788\nint64\n\n\n26\nzip_city\n683788\nobject\n\n\n27\ncommunity_board\n683788\nint64\n\n\n28\nborocode\n683788\nint64\n\n\n29\nborough\n683788\nobject\n\n\n30\ncncldist\n683788\nint64\n\n\n31\nst_assem\n683788\nint64\n\n\n32\nst_senate\n683788\nint64\n\n\n33\nnta\n683788\nobject\n\n\n34\nnta_name\n683788\nobject\n\n\n35\nboro_ct\n683788\nint64\n\n\n36\nstate\n683788\nobject\n\n\n37\nlatitude\n683788\nfloat64\n\n\n38\nlongitude\n683788\nfloat64\n\n\n39\nx_sp\n683788\nfloat64\n\n\n40\ny_sp\n683788\nfloat64\n\n\n41\ncouncil_district\n677269\nfloat64\n\n\n42\ncensus_tract\n677269\nfloat64\n\n\n43\nbin\n674229\nfloat64\n\n\n44\nbbl\n674229\nfloat64\n\n\n\n\n\n\n\n\nFigure 2: Просмотр данных\n\n\n\n\nПосмотрим по каким столбцам есть пропущенные значения, рисунок: Figure 3.\n\n\nCode\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nsns.set_theme(style=\"whitegrid\")\n\n\nnullable_df = df.isna().sum()\nmissing_data_percentage_df = nullable_df[nullable_df &gt; 0] / len(df) * 100\nmissing_data_percentage_df = missing_data_percentage_df.sort_values()\n\n_, ax = plt.subplots(1, 1, figsize=(10, 5), sharex=True)\nx = missing_data_percentage_df.values\ny = missing_data_percentage_df.index\nsns.barplot(x=x, y=y, hue=y, palette=\"rocket\", ax=ax, orient=\"y\")\nax.set_ylabel(\"Столбцы\")\nax.set_xlabel(\"Процент пропущенных значений, %\")\nplt.show()\n\n\n\n\n\n\n\n\nFigure 3: Просмотр пропущенных значений в данных\n\n\n\n\n\nПосмотрим на виды деревьев, рисунок: Figure 4.\n\n\nCode\nN_SPECIES = 10\ntree_species = df[\"spc_common\"].value_counts()[:N_SPECIES]\nlabels = list(tree_species.index) + [\"other\"]\nother_value = sum(v for v in df[\"spc_common\"].value_counts()[N_SPECIES:].values)\nvalues = list(tree_species.values) + [other_value]\ncolors = sns.color_palette('pastel')\n_, ax = plt.subplots(1, 1, figsize=(12, 8), sharex=True)\nax.pie(values, labels=labels, colors=colors, autopct='%.1f%%')\nplt.show()\n\n\n\n\n\n\n\n\nFigure 4: Диаграмма видов деревьев\n\n\n\n\n\nПосмотрим на распределение источников данных, рисунок: Figure 5.\n\n\nCode\n_, ax = plt.subplots(1, 1, figsize=(9, 6), sharex=True)\ndata_sources = df[\"user_type\"].value_counts()\nx1 = data_sources.index\ny1 = data_sources.values\nsns.barplot(x=x1, y=y1, palette=\"rocket\", hue=y1, ax=ax)\nax.set_ylabel(\"Количество зарегистрированных деревьев, ед.\")\nax.set_xlabel(\"Тип источника данных\")\nplt.show()\n\n\n\n\n\n\n\n\nFigure 5: Распределение источников данных\n\n\n\n\n\nПосмотрим на распределение статуса деревьев, рисунок: Figure 6.\n\n\nCode\n_, ax = plt.subplots(1, 1, figsize=(9, 6), sharex=True)\nstatuses = df[\"status\"].value_counts()\nx2 = statuses.index\ny2 = statuses.values\nsns.barplot(x=x2, y=y2, palette=\"rocket\", hue=y2, ax=ax)\nax.set_ylabel(\"Количество деревьев, ед.\")\nax.set_xlabel(\"Статус дерева\")\nplt.show()\n\n\n\n\n\n\n\n\nFigure 6: Распределение статуса деревьев",
    "crumbs": [
      "Home",
      "Notebooks",
      "Kaggle Tree EDA"
    ]
  },
  {
    "objectID": "kaggle_tree_eda.html#знакомство-с-датасетом",
    "href": "kaggle_tree_eda.html#знакомство-с-датасетом",
    "title": "Kaggle Tree EDA",
    "section": "",
    "text": "Посмотрим на данные в датасете, рисунок: Figure 1.\n\n\nCode\nimport os\n\nimport pandas as pd\nfrom dotenv import load_dotenv\n\nload_dotenv()\nDATA_PATH = os.environ.get('KAGGLE_TREE_DATA', \"data.csv\")\ndf = pd.read_csv(DATA_PATH)\nnew_columns = [\"_\".join(c.split()) for c in df.columns]\ndf.columns = pd.Index(new_columns)\ndf.head()\n\n\n\n\n\n\n\n\n\n\n\n\ntree_id\nblock_id\ncreated_at\ntree_dbh\nstump_diam\ncurb_loc\nstatus\nhealth\nspc_latin\nspc_common\n...\nboro_ct\nstate\nlatitude\nlongitude\nx_sp\ny_sp\ncouncil_district\ncensus_tract\nbin\nbbl\n\n\n\n\n0\n180683\n348711\n2015-08-27T00:00:00.000\n3\n0\nOnCurb\nAlive\nFair\nAcer rubrum\nred maple\n...\n4073900\nNew York\n40.723092\n-73.844215\n1027431.148\n202756.7687\n29.0\n739.0\n4052307.0\n4.022210e+09\n\n\n1\n200540\n315986\n2015-09-03T00:00:00.000\n21\n0\nOnCurb\nAlive\nFair\nQuercus palustris\npin oak\n...\n4097300\nNew York\n40.794111\n-73.818679\n1034455.701\n228644.8374\n19.0\n973.0\n4101931.0\n4.044750e+09\n\n\n2\n204026\n218365\n2015-09-05T00:00:00.000\n3\n0\nOnCurb\nAlive\nGood\nGleditsia triacanthos var. inermis\nhoneylocust\n...\n3044900\nNew York\n40.717581\n-73.936608\n1001822.831\n200716.8913\n34.0\n449.0\n3338310.0\n3.028870e+09\n\n\n3\n204337\n217969\n2015-09-05T00:00:00.000\n10\n0\nOnCurb\nAlive\nGood\nGleditsia triacanthos var. inermis\nhoneylocust\n...\n3044900\nNew York\n40.713537\n-73.934456\n1002420.358\n199244.2531\n34.0\n449.0\n3338342.0\n3.029250e+09\n\n\n4\n189565\n223043\n2015-08-30T00:00:00.000\n21\n0\nOnCurb\nAlive\nGood\nTilia americana\nAmerican linden\n...\n3016500\nNew York\n40.666778\n-73.975979\n990913.775\n182202.4260\n39.0\n165.0\n3025654.0\n3.010850e+09\n\n\n\n\n5 rows × 45 columns\n\n\n\n\nFigure 1: Просмотр данных\n\n\n\n\nПосмотрим более подробную информацию о датасете, рисунок: Figure 2.\n\n\nCode\nimport io\n\nbuf = io.StringIO()\ndf.info(buf=buf)\nlines = buf.getvalue().splitlines()[3:-2]\nlines = lines[:1] + lines[2:]\nline_list = [line.split()[1:3] + line.split()[4:5] for line in lines]\npd.DataFrame(data=line_list[1:], columns=line_list[0])\n\n\n\n\n\n\n\n\n\n\n\n\nColumn\nNon-Null\nDtype\n\n\n\n\n0\ntree_id\n683788\nint64\n\n\n1\nblock_id\n683788\nint64\n\n\n2\ncreated_at\n683788\nobject\n\n\n3\ntree_dbh\n683788\nint64\n\n\n4\nstump_diam\n683788\nint64\n\n\n5\ncurb_loc\n683788\nobject\n\n\n6\nstatus\n683788\nobject\n\n\n7\nhealth\n652172\nobject\n\n\n8\nspc_latin\n652169\nobject\n\n\n9\nspc_common\n652169\nobject\n\n\n10\nsteward\n164350\nobject\n\n\n11\nguards\n79866\nobject\n\n\n12\nsidewalk\n652172\nobject\n\n\n13\nuser_type\n683788\nobject\n\n\n14\nproblems\n225844\nobject\n\n\n15\nroot_stone\n683788\nobject\n\n\n16\nroot_grate\n683788\nobject\n\n\n17\nroot_other\n683788\nobject\n\n\n18\ntrunk_wire\n683788\nobject\n\n\n19\ntrnk_light\n683788\nobject\n\n\n20\ntrnk_other\n683788\nobject\n\n\n21\nbrch_light\n683788\nobject\n\n\n22\nbrch_shoe\n683788\nobject\n\n\n23\nbrch_other\n683788\nobject\n\n\n24\naddress\n683788\nobject\n\n\n25\npostcode\n683788\nint64\n\n\n26\nzip_city\n683788\nobject\n\n\n27\ncommunity_board\n683788\nint64\n\n\n28\nborocode\n683788\nint64\n\n\n29\nborough\n683788\nobject\n\n\n30\ncncldist\n683788\nint64\n\n\n31\nst_assem\n683788\nint64\n\n\n32\nst_senate\n683788\nint64\n\n\n33\nnta\n683788\nobject\n\n\n34\nnta_name\n683788\nobject\n\n\n35\nboro_ct\n683788\nint64\n\n\n36\nstate\n683788\nobject\n\n\n37\nlatitude\n683788\nfloat64\n\n\n38\nlongitude\n683788\nfloat64\n\n\n39\nx_sp\n683788\nfloat64\n\n\n40\ny_sp\n683788\nfloat64\n\n\n41\ncouncil_district\n677269\nfloat64\n\n\n42\ncensus_tract\n677269\nfloat64\n\n\n43\nbin\n674229\nfloat64\n\n\n44\nbbl\n674229\nfloat64\n\n\n\n\n\n\n\n\nFigure 2: Просмотр данных\n\n\n\n\nПосмотрим по каким столбцам есть пропущенные значения, рисунок: Figure 3.\n\n\nCode\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nsns.set_theme(style=\"whitegrid\")\n\n\nnullable_df = df.isna().sum()\nmissing_data_percentage_df = nullable_df[nullable_df &gt; 0] / len(df) * 100\nmissing_data_percentage_df = missing_data_percentage_df.sort_values()\n\n_, ax = plt.subplots(1, 1, figsize=(10, 5), sharex=True)\nx = missing_data_percentage_df.values\ny = missing_data_percentage_df.index\nsns.barplot(x=x, y=y, hue=y, palette=\"rocket\", ax=ax, orient=\"y\")\nax.set_ylabel(\"Столбцы\")\nax.set_xlabel(\"Процент пропущенных значений, %\")\nplt.show()\n\n\n\n\n\n\n\n\nFigure 3: Просмотр пропущенных значений в данных\n\n\n\n\n\nПосмотрим на виды деревьев, рисунок: Figure 4.\n\n\nCode\nN_SPECIES = 10\ntree_species = df[\"spc_common\"].value_counts()[:N_SPECIES]\nlabels = list(tree_species.index) + [\"other\"]\nother_value = sum(v for v in df[\"spc_common\"].value_counts()[N_SPECIES:].values)\nvalues = list(tree_species.values) + [other_value]\ncolors = sns.color_palette('pastel')\n_, ax = plt.subplots(1, 1, figsize=(12, 8), sharex=True)\nax.pie(values, labels=labels, colors=colors, autopct='%.1f%%')\nplt.show()\n\n\n\n\n\n\n\n\nFigure 4: Диаграмма видов деревьев\n\n\n\n\n\nПосмотрим на распределение источников данных, рисунок: Figure 5.\n\n\nCode\n_, ax = plt.subplots(1, 1, figsize=(9, 6), sharex=True)\ndata_sources = df[\"user_type\"].value_counts()\nx1 = data_sources.index\ny1 = data_sources.values\nsns.barplot(x=x1, y=y1, palette=\"rocket\", hue=y1, ax=ax)\nax.set_ylabel(\"Количество зарегистрированных деревьев, ед.\")\nax.set_xlabel(\"Тип источника данных\")\nplt.show()\n\n\n\n\n\n\n\n\nFigure 5: Распределение источников данных\n\n\n\n\n\nПосмотрим на распределение статуса деревьев, рисунок: Figure 6.\n\n\nCode\n_, ax = plt.subplots(1, 1, figsize=(9, 6), sharex=True)\nstatuses = df[\"status\"].value_counts()\nx2 = statuses.index\ny2 = statuses.values\nsns.barplot(x=x2, y=y2, palette=\"rocket\", hue=y2, ax=ax)\nax.set_ylabel(\"Количество деревьев, ед.\")\nax.set_xlabel(\"Статус дерева\")\nplt.show()\n\n\n\n\n\n\n\n\nFigure 6: Распределение статуса деревьев",
    "crumbs": [
      "Home",
      "Notebooks",
      "Kaggle Tree EDA"
    ]
  },
  {
    "objectID": "kaggle_tree_eda.html#анализ-признаков",
    "href": "kaggle_tree_eda.html#анализ-признаков",
    "title": "Kaggle Tree EDA",
    "section": "Анализ признаков",
    "text": "Анализ признаков\nПроведем попарное сравнение некоторых признаков, рисунок: Figure 7.\n\n\nCode\nPAIRPLOT_FEATURES = [\"tree_dbh\", \"stump_diam\", \"latitude\", \"longitude\"]\nPAIRPLOT_N_ROWS = int(len(df) * 0.1)\npairplot_df = df[PAIRPLOT_FEATURES].sample(PAIRPLOT_N_ROWS)\n\npairplot = sns.pairplot(pairplot_df, diag_kind=\"kde\", corner=True)\n\n\n\n\n\n\n\n\nFigure 7: Диаграмма попарного сравнения\n\n\n\n\n\nПосмотрим на тепловую карту корреляций вещественных признаков, рисунок: Figure 8.\n\n\nCode\nFLOAT_FEATURES = [\"tree_dbh\", \"stump_diam\", \"latitude\", \"longitude\", \"x_sp\", \"y_sp\", \"bbl\", \"bin\"]\ncorr_df = df[FLOAT_FEATURES].corr()\n_, ax = plt.subplots(figsize=(11, 9))\nsns.heatmap(corr_df, annot=True, fmt=\".1f\", ax=ax)\nplt.show()\n\n\n\n\n\n\n\n\nFigure 8: Тепловая карта корреляции",
    "crumbs": [
      "Home",
      "Notebooks",
      "Kaggle Tree EDA"
    ]
  },
  {
    "objectID": "kaggle_tree_eda.html#визуализация-на-карте",
    "href": "kaggle_tree_eda.html#визуализация-на-карте",
    "title": "Kaggle Tree EDA",
    "section": "Визуализация на карте",
    "text": "Визуализация на карте\nПосмотрим небольшую выборку деревьев на карте, рисунок: Figure 9.\n\n\nCode\nimport folium  # type: ignore[import-untyped]\nimport numpy as np\nfrom folium.plugins import GroupedLayerControl  # type: ignore[import-untyped]\n\nMAP_N_ROWS = 500\n\n\ndef colorize_by_health(health_status: str) -&gt; str: \n  \"\"\"Get color by health status.\n  \n  :param health_status: \n  :return: color\n  \"\"\"\n  color_dict = {\n    \"Fair\": \"green\",\n    \"Good\": \"orange\", \n    \"Poor\": \"red\" \n  }\n  unknown_color = \"gray\" \n  return color_dict.get(health_status, unknown_color)\n\ncenter = df[\"latitude\"].mean(), df[\"longitude\"].mean()\nmap = folium.Map(location=center, zoom_start = 10)\n\nspecies_groups = dict()\nfor spec in tree_species.index:\n  species_groups[spec] = folium.FeatureGroup(name=spec.lower())\nother_group = folium.FeatureGroup(name='other')\n\nindexes = np.random.choice(len(df), MAP_N_ROWS)\nfor idx in indexes:\n  row = df.iloc[idx]\n  popup = (\n    f\"tree_id={row.tree_id} \"\n    f\"&lt;br/&gt; health={'Unknown' if pd.isna(row.health) else row.health} \"\n    f\"&lt;br/&gt; status={row.status}\"\n  )\n  location = [row.latitude, row.longitude]\n  icon = folium.Icon(color = colorize_by_health(row.health))\n  group = species_groups.get(row.spc_common, other_group)\n  folium.Marker(location = location, popup = popup, icon = icon, fill_opacity = 0.9).add_to(group)\n  \ngroups = list(species_groups.values()) + [other_group]\nfor group in groups:\n  map.add_child(group)\n\nGroupedLayerControl(\n    groups={'Виды деревьев': groups},\n    exclusive_groups=False,\n    collapsed=False,\n).add_to(map)\nmap\n\n\n\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\nFigure 9: Карта распределения деревьев",
    "crumbs": [
      "Home",
      "Notebooks",
      "Kaggle Tree EDA"
    ]
  },
  {
    "objectID": "kaggle_tree_eda.html#выводы",
    "href": "kaggle_tree_eda.html#выводы",
    "title": "Kaggle Tree EDA",
    "section": "Выводы",
    "text": "Выводы\n\ny_sp это преобразованный latitude\nx_sp это преобразованный longitude\nбольшинство деревьев живы",
    "crumbs": [
      "Home",
      "Notebooks",
      "Kaggle Tree EDA"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Home",
    "section": "",
    "text": "This is Documentation for MLOops course based on a Quarto website."
  }
]