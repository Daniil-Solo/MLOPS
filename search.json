[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Daniil Solovjev",
    "section": "",
    "text": "I am Python Backend Developer living in the Perm.\nCurrently I study at AI Talent Hub. I like to learn something new in programming."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Home",
    "section": "",
    "text": "This is Documentation for MLOops course based on a Quarto website."
  },
  {
    "objectID": "kaggle_tree_eda.html",
    "href": "kaggle_tree_eda.html",
    "title": "Kaggle Tree EDA",
    "section": "",
    "text": "Посмотрим на данные @table-head.\n\n\nCode\nimport os\nimport pandas as pd\nfrom dotenv import load_dotenv\n\n\nload_dotenv()\nDATA_PATH = os.environ.get('KAGGLE_TREE_DATA')\ndf = pd.read_csv(DATA_PATH)\ndf.head()\n\n\n\n\n\n\n\n\n\n\ntree_id\nblock_id\ncreated_at\ntree_dbh\nstump_diam\ncurb_loc\nstatus\nhealth\nspc_latin\nspc_common\n...\nboro_ct\nstate\nlatitude\nlongitude\nx_sp\ny_sp\ncouncil district\ncensus tract\nbin\nbbl\n\n\n\n\n0\n180683\n348711\n2015-08-27T00:00:00.000\n3\n0\nOnCurb\nAlive\nFair\nAcer rubrum\nred maple\n...\n4073900\nNew York\n40.723092\n-73.844215\n1027431.148\n202756.7687\n29.0\n739.0\n4052307.0\n4.022210e+09\n\n\n1\n200540\n315986\n2015-09-03T00:00:00.000\n21\n0\nOnCurb\nAlive\nFair\nQuercus palustris\npin oak\n...\n4097300\nNew York\n40.794111\n-73.818679\n1034455.701\n228644.8374\n19.0\n973.0\n4101931.0\n4.044750e+09\n\n\n2\n204026\n218365\n2015-09-05T00:00:00.000\n3\n0\nOnCurb\nAlive\nGood\nGleditsia triacanthos var. inermis\nhoneylocust\n...\n3044900\nNew York\n40.717581\n-73.936608\n1001822.831\n200716.8913\n34.0\n449.0\n3338310.0\n3.028870e+09\n\n\n3\n204337\n217969\n2015-09-05T00:00:00.000\n10\n0\nOnCurb\nAlive\nGood\nGleditsia triacanthos var. inermis\nhoneylocust\n...\n3044900\nNew York\n40.713537\n-73.934456\n1002420.358\n199244.2531\n34.0\n449.0\n3338342.0\n3.029250e+09\n\n\n4\n189565\n223043\n2015-08-30T00:00:00.000\n21\n0\nOnCurb\nAlive\nGood\nTilia americana\nAmerican linden\n...\n3016500\nNew York\n40.666778\n-73.975979\n990913.775\n182202.4260\n39.0\n165.0\n3025654.0\n3.010850e+09\n\n\n\n\n5 rows × 45 columns\n\n\nПросмотр данных\n\n\nПосмотрим по каким столбцам есть пропущенные значения @missing-values-in-columns.\n\n\nCode\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_theme(style=\"whitegrid\")\n\n\nnullable_df = df.isna().sum()\nmissing_data_percentage_df = nullable_df[nullable_df &gt; 0] / len(df) * 100\nmissing_data_percentage_df = missing_data_percentage_df.sort_values()\n\nf, ax = plt.subplots(1, 1, figsize=(10, 5), sharex=True)\nx = missing_data_percentage_df.index\ny = missing_data_percentage_df.values\nsns.barplot(x=x, y=y, hue=x, palette=\"rocket\", ax=ax, orient=\"y\")\nax.set_ylabel(\"Процент пропущенных значений, %\")\nax.set_xlabel(\"Столбцы\")\nax.set_title(\"Процент пропущенных значений\")\nf.show()\n\n\n\n\n\nПросмотр пропущенных значений в данных\n\n\n\n\nПосмотрим на виды деревьев @tree-species.\n\n\nCode\ntree_species = df[\"spc_common\"].value_counts()[:15]\nlabels = tree_species.index + [\"other\"]\nvalues = tree_species.values + df[\"spc_common\"].value_counts()[15:].values.sum()\ncolors = sns.color_palette('pastel')\nf, ax = plt.subplots(1, 1, figsize=(12, 8), sharex=True)\nax.pie(values, labels=labels, colors=colors, autopct='%.1f%%')\nax.set_title(\"Виды деревьев\")\nf.show()\n\n\n\n\n\nДиаграмма видов деревьев\n\n\n\n\nПроведем попарное сравнение некоторых признаков @pair-diagram.\n\n\nCode\nPAIRPLOT_FEATURES = [\"tree_dbh\", \"stump_diam\", \"latitude\", \"longitude\"]\nPAIRPLOT_N_ROWS = int(len(df) * 0.1)\npairplot_df = df[PAIRPLOT_FEATURES].sample(PAIRPLOT_N_ROWS)\n\npairplot = sns.pairplot(pairplot_df, diag_kind=\"kde\", corner=True)\n\n\n\n\n\nДиаграмма попарного сравнения\n\n\n\n\nПосмотрим на тепловую карту корреляций вещественных признаков @corr-heatmap.\n\n\nCode\nFLOAT_FEATURES = [\"tree_dbh\", \"stump_diam\", \"latitude\", \"longitude\", \"x_sp\", \"y_sp\", \"bbl\", \"bin\"]\ncorr_df = df[FLOAT_FEATURES].corr()\nf, ax = plt.subplots(figsize=(11, 9))\nsns.heatmap(corr_df, annot=True, fmt=\".1f\", ax=ax)\nf.show()\n\n\n\n\n\nТепловая карта корреляции\n\n\n\n\nПосмотрим распределение небольшой выборки деревьев на карте @map.\n\n\nCode\nimport numpy as np\nimport folium\nfrom folium.plugins import GroupedLayerControl\nMAP_N_ROWS = 500\n\n\ndef colorize_by_health(health_status: str) -&gt; str:\n  if health_status == \"Fair\":\n    return \"green\"\n  elif health_status == \"Good\":\n    return \"orange\"\n  elif health_status == \"Poor\":\n    return \"red\"\n  else:\n    return \"gray\"\n\ncenter = df[\"latitude\"].mean(), df[\"longitude\"].mean()\nmap = folium.Map(location=center, zoom_start = 10)\n\nspecies_groups = dict()\nfor spec in tree_species.index:\n  species_groups[spec] = folium.FeatureGroup(name=spec.lower())\nother_group = folium.FeatureGroup(name='other')\n\nindexes = np.random.choice(len(df), MAP_N_ROWS)\nfor idx in indexes:\n  row = df.iloc[idx]\n  popup = f\"tree_id={row.tree_id}\"\n  location = [row.latitude, row.longitude]\n  icon = folium.Icon(color = colorize_by_health(row.health))\n  group = species_groups.get(row.spc_common, other_group)\n  folium.Marker(location = location, popup = popup, icon = icon, fill_opacity = 0.9).add_to(group)\n  \ngroups = list(species_groups.values()) + [other_group]\nfor group in groups:\n  map.add_child(group)\n\nGroupedLayerControl(\n    groups={'Виды деревьев': groups},\n    exclusive_groups=False,\n    collapsed=False,\n)\nmap\n\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\nКарта распределения деревьев",
    "crumbs": [
      "Home",
      "Notebooks",
      "Kaggle Tree EDA"
    ]
  }
]